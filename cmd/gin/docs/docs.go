// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health-check": {
            "get": {
                "description": "Health check response",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health-check"
                ],
                "summary": "Health check response",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.responseMessage"
                        }
                    }
                }
            }
        },
        "/location": {
            "get": {
                "description": "List all picnic locations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "List all picnic locations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.responseAllLocation"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a picnic location",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Create a picnic location",
                "parameters": [
                    {
                        "description": "Location Object",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/logic.PicnicLocationInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/routes.responseID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            }
        },
        "/location/{id}": {
            "get": {
                "description": "Fetch a picnic location by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Fetch a picnic location by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.responseOneLocation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a picnic location by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Update a picnic location by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location Object",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/logic.PicnicLocationInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.responseOneLocation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a location by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "location"
                ],
                "summary": "Delete a location by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/routes.responseMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            }
        },
        "/teddy-bear": {
            "get": {
                "description": "List all teddy bears",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teddy-bear"
                ],
                "summary": "List all teddy bears",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.responseAllTeddyBear"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a teddy bear",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teddy-bear"
                ],
                "summary": "Create a teddy bear",
                "parameters": [
                    {
                        "description": "Teddy Bear Object",
                        "name": "teddyBear",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/logic.TeddyBearInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/routes.responseID"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            }
        },
        "/teddy-bear/paginated": {
            "get": {
                "description": "List all teddy bears with page and limit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teddy-bear"
                ],
                "summary": "List all teddy bears with page and limit",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default 10, max 15)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.responseAllTeddyBear"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            }
        },
        "/teddy-bear/{name}": {
            "get": {
                "description": "Fetch a teddy bear by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teddy-bear"
                ],
                "summary": "Fetch a teddy bear by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Teddy Bear Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.responseOneTeddyBear"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a teddy bear by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teddy-bear"
                ],
                "summary": "Update a teddy bear by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Teddy Bear Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Teddy Bear Object",
                        "name": "teddyBear",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/logic.TeddyBearInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.responseOneTeddyBear"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a teddy bear by name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teddy-bear"
                ],
                "summary": "Delete a teddy bear by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Teddy Bear Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/routes.responseMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.responseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "logic.PicnicLocationInput": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "location_name": {
                    "type": "string"
                },
                "municipality": {
                    "type": "string"
                }
            }
        },
        "logic.PicnicLocationReturn": {
            "type": "object",
            "properties": {
                "capacity": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "location_name": {
                    "type": "string"
                },
                "municipality": {
                    "type": "string"
                }
            }
        },
        "logic.TeddyBearInput": {
            "type": "object",
            "properties": {
                "accent_color": {
                    "type": "string"
                },
                "characteristic": {
                    "type": "string"
                },
                "is_dressed": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner_name": {
                    "type": "string"
                },
                "picnic_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "primary_color": {
                    "type": "string"
                }
            }
        },
        "logic.TeddyBearReturn": {
            "type": "object",
            "properties": {
                "accent_color": {
                    "type": "string"
                },
                "characteristic": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_dressed": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner_name": {
                    "type": "string"
                },
                "picnic_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "primary_color": {
                    "type": "string"
                }
            }
        },
        "routes.responseAllLocation": {
            "type": "object",
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/logic.PicnicLocationReturn"
                    }
                }
            }
        },
        "routes.responseAllTeddyBear": {
            "type": "object",
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/logic.TeddyBearReturn"
                    }
                }
            }
        },
        "routes.responseError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "routes.responseID": {
            "type": "object",
            "properties": {
                "object_id": {
                    "type": "integer"
                }
            }
        },
        "routes.responseMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "routes.responseOneLocation": {
            "type": "object",
            "properties": {
                "location": {
                    "$ref": "#/definitions/logic.PicnicLocationReturn"
                }
            }
        },
        "routes.responseOneTeddyBear": {
            "type": "object",
            "properties": {
                "location": {
                    "$ref": "#/definitions/logic.TeddyBearReturn"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
